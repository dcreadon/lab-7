#include <stdio.h>
#define MAXPOINTS 10000

// compute the average of the first num_items of buffer
double avg(double buffer[], int num_items);

//update the max and min of the first num_items of array
void maxmin(double array[], int num_items, double* max, double* min);

//shift length-1 elements of the buffer to the left and put the 
//new_item on the right.
void updatebuffer(double buffer[], int length, double new_item);



int main(int argc, char* argv[]) {
	
	/* DO NOT CHANGE THIS PART OF THE CODE */

	double x[MAXPOINTS], y[MAXPOINTS], z[MAXPOINTS];
	int lengthofavg = 0;
	if (argc>1) {
		sscanf(argv[1], "%d", &lengthofavg );
		//printf("You entered a buffer length of %d\n", lengthofavg);
	}
	else {
		printf("Enter a length on the command line\n");
		return -1;
	}
	if (lengthofavg <1 || lengthofavg > MAXPOINTS) {
		printf("Invalid length\n");
		return -1;
	}


	
	/* PUT YOUR CODE HERE */
	double g_x, g_y, g_z, avg_x, avg_y, avg_z, xmin, xmax, ymin, ymax, zmin, zmax;
	int t, Button_T, Button_C, Button_X, Button_S;
	int j; 
	
	for (j = 0; j < lengthofavg; j++) {
		scanf("%d,%lf,%lf,%lf,%d,%d,%d,%d,%d", &t, &g_x, &g_y, &g_z, &Button_T, &Button_C, &Button_X, &Button_S);
		x[j] = g_x;
		y[j] = g_y;
		z[j] = g_z;
	}
	
	while (Button_S == 0) {
	scanf("%d,%lf,%lf,%lf,%d,%d,%d,%d", &t, &g_x, &g_y, &g_z, &Button_T, &Button_C, &Button_X, &Button_S);
	
	updatebuffer(x, lengthofavg, g_x);
	updatebuffer(y, lengthofavg, g_y);
	updatebuffer(z, lengthofavg, g_z);

	avg_x = avg(x, lengthofavg);
	avg_y = avg(y, lengthofavg);
	avg_z = avg(z, lengthofavg);
	
	maxmin(x, lengthofavg, &xmax, &xmin);
	maxmin(y, lengthofavg, &ymax, &ymin);
	maxmin(z, lengthofavg, &zmax, &zmin);
	
	printf("%d, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf\n", t, g_x, avg_x, xmax, xmin, g_y, avg_y, ymax, ymin, g_z, avg_z, zmax, zmin);
	printf("\n");
	fflush(stdout); 
}
}

// compute the average of the first num_items of buffer
double avg(double buffer[], int num_items) {
	double sum = 0;
	int i;
	for (i = 0; i < num_items; i++) {
		sum = sum + buffer [i];
	}
	return (sum / num_items);
}

//update the max and min of the first num_items of array
void maxmin(double array[], int num_items, double* max, double* min) {
	int i;
	*max = array[0];
	*min = array[0];
	for (i = 0; i < num_items; i++) {
		
		if (array[i] > *max) {
			*max = array[i];
		}
		
		if (array[i] < *min) {
			*min = array [i];
		}
	}
}
//shift length-1 elements of the buffer to the left and put the 
//new_item on the right.
void updatebuffer(double buffer[], int length, double new_item) {
	int i; 
	for (i = 0; i < length; i++) {
		buffer[i] = buffer[i + 1];
	}
	buffer[length - 1] = new_item;
}
